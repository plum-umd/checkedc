% Time sensitive computation: Source transformers.
@inproceedings{molnar2005program,
  title={The program counter security model: Automatic detection and removal of control-flow side channel attacks},
  author={Molnar, David and Piotrowski, Matt and Schultz, David and Wagner, David},
  booktitle={International Conference on Information Security and Cryptology},
  pages={156--168},
  year={2005},
  organization={Springer}
}

% Time sensitive computation - special languages.
@inproceedings{cauligi2019fact,
  title={FaCT: a DSL for timing-sensitive computation},
  author={Cauligi, Sunjay and Soeller, Gary and Johannesmeyer, Brian and Brown, Fraser and Wahby, Riad S and Renner, John and Gr{\'e}goire, Benjamin and Barthe, Gilles and Jhala, Ranjit and Stefan, Deian},
  booktitle={Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages={174--189},
  year={2019}
}

@inproceedings{jim2002cyclone,
  title={Cyclone: a safe dialect of C.},
  author={Jim, Trevor and Morrisett, J Gregory and Grossman, Dan and Hicks, Michael W and Cheney, James and Wang, Yanling},
  booktitle={USENIX Annual Technical Conference, General Track},
  pages={275--288},
  year={2002}
}

@inproceedings{duck2016heap,
  title={Heap bounds protection with low fat pointers},
  author={Duck, Gregory J and Yap, Roland HC},
  booktitle={Proceedings of the 25th International Conference on Compiler Construction},
  pages={132--142},
  year={2016},
  organization={ACM}
}

@misc{cvetrend,
  title = {CVE trends},
  howpublished = {\url{https://www.cvedetails.com/vulnerabilities-by-types.php}},
  author={CVE Trends},
  year={2021},
  note = {Accessed: 2020-10-11}
}

@misc{microsoftmemsafe,
  title = {Memory corruption is still the most prevalent security vulnerability},
  howpublished = {\url{https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/}},
  note = {Accessed: 2020-02-11},
  author={BlueHat},
  year={2019}
}

@article{zeng2019identifying,
  title={Identifying Barriers to Adoption for Rust through Online Discourse},
  author={Zeng, Anna and Crichton, Will},
  journal={arXiv preprint arXiv:1901.01001},
  year={2019}
}

@misc{checkedc:temporal,
  title = {The Benefits and Costs of Using Fat Pointers for Temporal Memory Safety},
  author = {Jie Zhou},
  howpublished = {Poster presentation at PLDI 2021 student research competition (silver medalist)},
  month = jun,
  year = 2021}
  
@article{emre2021c2rust,
  title={Translating {C} to Safer {Rust}},
  author={Mehmet Emre and Kyle Dewey and Ryan Schroeder and Ben Hardekopf},
  journal={In Proceedings of the 2021 ACM on Programming Languges (PACMPL)},
  volume={5},
  number={OOPSLA},
  optpages={1--35},
  year={2021},
  optpublisher={ACM New York, NY, USA}
}

@inproceedings{duanrefactoring,
  title={Refactoring the {FreeBSD} Kernel with {Checked C}},
  author={Duan, Junhan and Yang, Yudi and Zhou, Jie and Criswell, John},
year = {2020},
booktitle = {Proceedings of the 2020 IEEE Cybersecurity Development Conference (SecDev)},
}

@misc{c2rusttalk,
author = {Per Larson},
title = {Migrating Legacy Code to {Rust}},
howpublished = {RustConf 2018 talk},
month = aug,
year = 2018
}

@misc{c2rust,
  title = {C to rust translation, refactoring, and cross-checking},
  howpublished = {\url{https://c2rust.com/}},
  year = 2021,
}

@inproceedings{song2019sanitizing,
  title =	 {{SoK}: Sanitizing for Security},
  author =	 {Song, Dokyung and Lettner, Julian and Rajasekaran, Prabhu
                  and Na, Yeoul and Volckaert, Stijn and Larsen, Per
		  and Franz, Michael},
  booktitle =	 {Proceedings of the 2019 IEEE Symposium on Security and Privacy (S\&P)},
  year =	 {2019}
}

@inproceedings{redini2017bootstomp,
  title={Bootstomp: on the security of bootloaders in mobile devices},
  author={Redini, Nilo and Machiry, Aravind and Das, Dipanjan and Fratantonio, Yanick and Bianchi, Antonio and Gustafson, Eric and Shoshitaishvili, Yan and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={26th $\{$USENIX$\}$ Security Symposium ($\{$USENIX$\}$ Security 17)},
  pages={781--798},
  year={2017}
}

@inproceedings{ourwork,
author = {Machiry, Aravind and Touma, Hasan and Chen, Ray and Hicks, Micheal},
title = {Automated conversion of legacy code to Checked C},
booktitle = {IEEE Cybersecurity Development Conference 2019 (SecDev)},
year = {2019},
month = sep
}

@inproceedings{corina2017difuze,
  title={Difuze: Interface aware fuzzing for kernel drivers},
  author={Corina, Jake and Machiry, Aravind and Salls, Christopher and Shoshitaishvili, Yan and Hao, Shuang and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2123--2138},
  year={2017}
}

@inproceedings{machiry2017dr,
  title={$\{$DR$\}$.$\{$CHECKER$\}$: A soundy analysis for linux kernel drivers},
  author={Machiry, Aravind and Spensky, Chad and Corina, Jake and Stephens, Nick and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={26th $\{$USENIX$\}$ Security Symposium ($\{$USENIX$\}$ Security 17)},
  pages={1007--1024},
  year={2017}
}

@article{machiry2022c,
  title={C to Checked C by 3C},
  author={Machiry, Aravind and Kastner, John and McCutchen, Matt and Eline, Aaron and Headley, Kyle and Hicks, Michael},
  journal={Proceedings of the ACM on Programming Languages},
  volume={6},
  number={OOPSLA1},
  pages={1--29},
  year={2022},
  publisher={ACM New York, NY, USA}
}

@inproceedings{machiry2017boomerang,
  title={BOOMERANG: Exploiting the Semantic Gap in Trusted Execution Environments.},
  author={Machiry, Aravind and Gustafson, Eric and Spensky, Chad and Salls, Christopher and Stephens, Nick and Wang, Ruoyu and Bianchi, Antonio and Choe, Yung Ryn and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={NDSS},
  year={2017}
}

@article{mergendahlcross,
  title={Cross-Language Attacks},
  author={Mergendahl, Samuel and Burow, Nathan and Okhravi, Hamed},
  booktitle={NDSS},
  year={2022}
}

@inproceedings{jeon2017hextype,
  title={Hextype: Efficient detection of type confusion errors for c++},
  author={Jeon, Yuseok and Biswas, Priyam and Carr, Scott and Lee, Byoungyoung and Payer, Mathias},
  booktitle={Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2373--2387},
  year={2017}
}

@misc{rustlang,
title = {{Rust} {Programming Language}},
author = {Mozilla},
howpublished = {\url{https://www.rust-lang.org/}},
year = {2021}
}

@book{donovan2015go,
  title={The Go programming language},
  author={Donovan, Alan AA and Kernighan, Brian W},
  year={2015},
  publisher={Addison-Wesley Professional}
}

@article{nagarakatte2009softbound,
  title={SoftBound: Highly compatible and complete spatial memory safety for C},
  author={Nagarakatte, Santosh and Zhao, Jianzhou and Martin, Milo MK and Zdancewic, Steve},
  journal={ACM Sigplan Notices},
  volume={44},
  number={6},
  pages={245--258},
  year={2009},
  publisher={ACM}
}

@article{steffen1992adding,
  title={Adding run-time checking to the portable C compiler},
  author={Steffen, Joseph L},
  journal={Software: Practice and Experience},
  volume={22},
  number={4},
  pages={305--316},
  year={1992},
  publisher={Wiley Online Library}
}

@inproceedings{naik2021sporq,
  title={Sporq: An Interactive Environment for Exploring Code using Query-by-Example},
  author={Naik, Aaditya and Mendelson, Jonathan and Sands, Nathaniel and Wang, Yuepeng and Naik, Mayur and Raghothaman, Mukund},
  booktitle={The 34th Annual ACM Symposium on User Interface Software and Technology},
  pages={84--99},
  year={2021}
}

@book{tan2017principles,
  title={Principles and implementation techniques of software-based fault isolation},
  author={Tan, Gang and others},
  year={2017},
  publisher={Now Publishers}
}

@inproceedings{ruef2019achieving,
  title={Achieving safety incrementally with checked c},
  author={Ruef, Andrew and Lampropoulos, Leonidas and Sweet, Ian and Tarditi, David and Hicks, Michael},
  booktitle={International Conference on Principles of Security and Trust},
  pages={76--98},
  year={2019},
  organization={Springer, Cham}
}

@inproceedings{siek2007gradual,
  title={Gradual typing for objects},
  author={Siek, Jeremy and Taha, Walid},
  booktitle={European Conference on Object-Oriented Programming},
  pages={2--27},
  year={2007},
  organization={Springer}
}

@InProceedings{tobinhochstadt_et_al:LIPIcs:2017:7120,
  author =      {Sam Tobin-Hochstadt and Matthias Felleisen and Robert Findler and Matthew Flatt and Ben Greenman and Andrew M. Kent and Vincent St-Amour and T. Stephen Strickland and Asumu Takikawa},
  title =       {{Migratory Typing: Ten Years Later}},
  booktitle =   {2nd Summit on Advances in Programming Languages (SNAPL 2017)},
  pages =       {17:1--17:17},
  year =        {2017},
  volume =      {71},
}

@article{Greenman:2018:STS:3243631.3236766,
 author = {Greenman, Ben and Felleisen, Matthias},
 title = {A Spectrum of Type Soundness and Performance},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {September 2018},
 volume = {2},
 number = {ICFP},
 year = {2018},
}

@inproceedings{kendall1983bcc,
  title={Bcc: Runtime checking for C programs},
  author={Kendall, Samuel C},
  booktitle={Proceedings of the USENIX Summer Conference},
  pages={5--16},
  year={1983}
}

@inproceedings{serebryany2012addresssanitizer,
  title={AddressSanitizer: A fast address sanity checker},
  author={Serebryany, Konstantin and Bruening, Derek and Potapenko, Alexander and Vyukov, Dmitriy},
  booktitle={{USENIX} Annual Technical Conference},
  pages={309--318},
  year={2012}
}

@article{10.1145/1065887.1065892,
author = {Necula, George C. and Condit, Jeremy and Harren, Matthew and McPeak, Scott and Weimer, Westley},
title = {CCured: Type-Safe Retrofitting of Legacy Software},
year = {2005},
issue_date = {May 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {27},
number = {3},
issn = {0164-0925},
url = {https://doi.org/10.1145/1065887.1065892},
doi = {10.1145/1065887.1065892},
abstract = {This article describes CCured, a program transformation system that adds type safety
guarantees to existing C programs. CCured attempts to verify statically that memory
errors cannot occur, and it inserts run-time checks where static verification is insufficient.CCured
extends C's type system by separating pointer types according to their usage, and
it uses a surprisingly simple type inference algorithm that is able to infer the appropriate
pointer kinds for existing C programs. CCured uses physical subtyping to recognize
and verify a large number of type casts at compile time. Additional type casts are
verified using run-time type information. CCured uses two instrumentation schemes,
one that is optimized for performance and one in which metadata is stored in a separate
data structure whose shape mirrors that of the original user data. This latter scheme
allows instrumented programs to invoke external functions directly on the program's
data without the use of a wrapper function.We have used CCured on real-world security-critical
network daemons to produce instrumented versions without memory-safety vulnerabilities,
and we have found several bugs in these programs. The instrumented code is efficient
enough to be used in day-to-day operations.},
journal = {ACM Trans. Program. Lang. Syst.},
month = may,
pages = {477–526},
numpages = {50},
keywords = {Memory safety, subtyping, libraries, pointer qualifier}
}

@inproceedings{tarditi2018checked,
author = {Tarditi, David and Elliott, Archibald Samuel and Ruef, Andrew and Hicks, Michael},
title = {{Checked} {C}: Making {C} Safe by Extension},
booktitle = {IEEE Cybersecurity Development Conference 2018 (SecDev)},
year = {2018},
month = sep
}

@article{necula2005ccured,
  title={CCured: type-safe retrofitting of legacy software},
  author={Necula, George C and Condit, Jeremy and Harren, Matthew and McPeak, Scott and Weimer, Westley},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={27},
  number={3},
  pages={477--526},
  year={2005},
  publisher={ACM}
}

@misc{chkcspec,
  title = {The {Checked} {C}},
  howpublished = {\url{https://github.com/microsoft/checkedc}},
  author={Checked C Spec},
  year={2016},
  note = {Accessed: 2020-10-10}
}

@article{giller2015implementing,
  title={Implementing practical electrical glitching attacks},
  author={Giller, Brett},
  journal={Black Hat Europe},
  year={2015}
}

@incollection{yuce2016fame,
  title={FAME: Fault-attack aware microprocessor extensions for hardware fault detection and software fault response},
  author={Yuce, Bilgiday and Ghalaty, Nahid F and Deshpande, Chinmay and Patrick, Conor and Nazhandali, Leyla and Schaumont, Patrick},
  booktitle={Proceedings of the Hardware and Architectural Support for Security and Privacy 2016},
  pages={1--8},
  year={2016}
}

@article{abadi2009control,
  title={Control-flow integrity principles, implementations, and applications},
  author={Abadi, Mart{\'\i}n and Budiu, Mihai and Erlingsson, Ulfar and Ligatti, Jay},
  journal={ACM Transactions on Information and System Security (TISSEC)},
  volume={13},
  number={1},
  pages={1--40},
  year={2009},
  publisher={ACM New York, NY, USA}
}

@incollection{kuznetzov2018code,
  title={Code-pointer integrity},
  author={Kuznetzov, Volodymyr and Szekeres, L{\'a}szl{\'o} and Payer, Mathias and Candea, George and Sekar, R and Song, Dawn},
  booktitle={The Continuing Arms Race: Code-Reuse Attacks and Defenses},
  pages={81--116},
  year={2018}
}

@inproceedings{spensky2021glitching,
  title={Glitching Demystified: Analyzing Control-flow-based Glitching Attacks and Defenses},
  author={Spensky, Chad and Machiry, Aravind and Burow, Nathan and Okhravi, Hamed and Housley, Rick and Gu, Zhongshu and Jamjoom, Hani and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={2021 51st Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)},
  pages={400--412},
  year={2021},
  organization={IEEE}
}

@article{quarta2021tarnhelm,
  title={Tarnhelm: Isolated, Transparent \& Confidential Execution of Arbitrary Code in ARM’s TrustZone},
  author={Quarta, Davide and Ianni, Michele and Machiry, Aravind and Fratantonio, Yanick and Gustafson, Eric and Balzarotti, Davide and Lindorfer, Martina and Vigna, Giovanni and Kruegel, Christopher},
  year={2021}
}

@ARTICLE{pratikakis11locksmith,
  TITLE = {Locksmith: Practical Static Race Detection for {C}},
  AUTHOR = {Polyvios Pratikakis and Jeffrey S. Foster and Michael Hicks},
  JOURNAL = {{ACM} Transactions on Programming Languages and Systems (TOPLAS)},
  MONTH = JAN,
  YEAR = 2011,
  VOLUME = {33},
  NUMBER = 1,
  PAGES = {Article 3}
}

@article{foster2006flow,
  title={Flow-insensitive type qualifiers},
  author={Foster, Jeffrey S and Johnson, Robert and Kodumal, John and Aiken, Alex},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={28},
  number={6},
  pages={1035--1087},
  year={2006},
  publisher={ACM New York, NY, USA}
}

@inproceedings{condit2007dependent,
  title={Dependent types for low-level programming},
  author={Condit, Jeremy and Harren, Matthew and Anderson, Zachary and Gay, David and Necula, George C},
  booktitle={European Symposium on Programming},
  pages={520--535},
  year={2007},
  organization={Springer}
}
