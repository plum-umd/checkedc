@inproceedings{rul2009towards,
  title={Towards automatic program partitioning},
  author={Rul, Sean and Vandierendonck, Hans and De Bosschere, Koen},
  booktitle={Proceedings of the 6th ACM conference on Computing frontiers},
  pages={89--98},
  year={2009}
}

@inproceedings{brumley2004privtrans,
  title={Privtrans: Automatically partitioning programs for privilege separation},
  author={Brumley, David and Song, Dawn},
  booktitle={USENIX Security Symposium},
  volume={57},
  number={72},
  year={2004}
}

@misc{bosamiya2020webassembly,
  title={WebAssembly as an intermediate language for provably-safe software sandboxing},
  author={Bosamiya, Jay and Lim, Benjamin and Parno, Bryan and Verified, Formally},
  year={2020},
  publisher={PriSC}
}

@inproceedings{bittau2008wedge,
  title={Wedge: Splitting applications into reduced-privilege compartments},
  author={Bittau, Andrea and Marchenko, Petr and Handley, Mark and Karp, Brad},
  year={2008},
  organization={USENIX Association}
}

@inproceedings{lind2017glamdring,
  title={Glamdring: Automatic application partitioning for intel $\{$SGX$\}$},
  author={Lind, Joshua and Priebe, Christian and Muthukumaran, Divya and O'Keeffe, Dan and Aublin, Pierre-Louis and Kelbert, Florian and Reiher, Tobias and Goltzsche, David and Eyers, David and Kapitza, R{\"u}diger and others},
  booktitle={2017 USENIX Annual Technical Conference (USENIX ATC 17)},
  pages={285--298},
  year={2017}
}

@inproceedings{liu2017ptrsplit,
  title={PtrSplit: Supporting general pointers in automatic program partitioning},
  author={Liu, Shen and Tan, Gang and Jaeger, Trent},
  booktitle={Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2359--2371},
  year={2017}
}

@article{tan2017principles,
  title={Principles and implementation techniques of software-based fault isolation},
  author={Tan, Gang and others},
  journal={Foundations and Trends{\textregistered} in Privacy and Security},
  volume={1},
  number={3},
  pages={137--198},
  year={2017},
  publisher={Now Publishers, Inc.}
}

@article{compcert,
        title = {Formal Verification of a Realistic Compiler},
        volume = {52},
        issn = {0001-0782},
        url = {http://doi.acm.org/10.1145/1538788.1538814},
        doi = {10/c9sb7q},
        language = {en},
        number = {7},
        urldate = {2019-09-30},
        journal = {Communications of the ACM},
        author = {Leroy, Xavier},
        month = jul,
        year = {2009},
        pages = {107--115}
}
%% A

@InProceedings{fidelius,
  title =        {Fidelius {Charm}: Isolating Unsafe {Rust} Code},
  author =       {Almohri, Hussain M.J. and Evans, David},
  booktitle =    {Proceedings of CODASPY 2018},
  year =         2018,
  organization = {ACM}
}

@inproceedings{servo-rust,
  author =       {Anderson, Brian and Bergstrom, Lars and Goregaokar,
                  Manish and Matthews, Josh and McAllister, Keegan and
                  Moffitt, Jack and Sapin, Simon},
  title =        {Engineering the {Servo} {Web} Browser Engine Using
                  Rust},
  booktitle =    {ICS 2016: SEIP},
  year =         2016,
  organization = {ACM}
}

@InProceedings{nacldroid,
  author =       {Athanasopoulos, Elias and Kemerlis, Vasileios P. and
                  Portokalidis, Georgios and Keromytis, Angelos D.},
  title =        {{NaClDroid}: Native Code Isolation for {Android}
                  Applications},
  booktitle =    {Proceedings of ESORICS 2016 (Volume~I)},
  year =         2016,
  publisher =    {Springer},
  volume =       9878,
  series =       {LNCS}
}

@article{sabelfeld2003ifc,
  title =        {Language-based information-flow security},
  author =       {Sabelfeld, Andrei and Myers, Andrew C},
  journal =      {IEEE Journal on Selected Areas in Communications},
  volume =       21,
  number =       1,
  year =         2003
}

@Misc{autocannon,
  key =          {autocannon},
  title =        {autocannon: fast {HTTP}/1.1 benchmarking tool written in {N}ode.js},
  howpublished = {
  \url{https://github.com/mcollina/autocannon}},
  year =         2016
}

@misc{cgmemtime,
  title = {{cgmemtime}},
  howpublished = {\url{https://github.com/gsauthof/cgmemtime}},
  author = {Georg Sauthoff},
  year = 2012,
}

%% B

@Misc{barth-et-al:chromium:08,
  author =       {Adam Barth and Collin Jackson and Charles Reis and
                  {the Google Chrome Team}},
  title =        {The Security Architecture of the {Chromium} Browser},
  howpublished = {Technical report},
  year =         2008
}

@inproceedings{dune,
  title =        {Dune: Safe User-level Access to Privileged {CPU}
                  Features},
  author =       {Belay, Adam and Bittau, Andrea and Mashtizadeh, Ali
                  Jos{\'e} and Terei, David and Mazi{\`e}res, David
                  and Kozyrakis, Christos},
  booktitle =    {OSDI},
  year =         2012,
  organization = {USENIX}
}

@InProceedings{bernstein:qmail:csaw07,
  author =       {Daniel J. Bernstein},
  title =        {Some Thoughts on Security after Ten Years of {Qmail}
                  1.0},
  booktitle =    {Proceedings of CSAW 2007},
  year =         2007,
  organization = {ACM}
}

@inproceedings{spin,
  author =       {Brian N. Bershad and Stefan Savage and Przemys{\l}aw
                  Pardyak and Emin G{\"u}n Sirer and Marc
                  E. Fiuczynski and David Becker and Craig Chambers
                  and Susan Eggers},
  title =        {Extensibility, Safety and Performance in the {SPIN}
                  Operating System},
  booktitle =    {Proceedings of SOSP 1995},
  year =         1995,
  organization = {ACM}
}

@article{rpc,
  title =        {Implementing Remote Procedure Calls},
  author =       {Birrell, Andrew D and Nelson, Bruce Jay},
  journal =      {ACM Transactions on Computer Systems},
  volume =       2,
  number =       1,
  year =         1984,
  publisher =    {ACM}
}

@InProceedings{wedge,
  title =        {Wedge: Splitting Applications into Reduced-Privilege
                  Compartments},
  author =       {Bittau, Andrea and Marchenko, Petr and Handley, Mark
                  and Karp, Brad},
  booktitle =    {NSDI},
  year =         2008,
  organization = {USENIX}
}

@Misc{google-sandboxed-api,
  author =       {Christian Blichmann and Robert Swiecki and {ISE
                  Sandboxing team}},
  title =        {Open-sourcing Sandboxed {API}},
  howpublished =
                  {
                  \url{https://security.googleblog.com/2019/03/open-sourcing-sandboxed-api.html}},
  year =         2019
}

@inproceedings{braden2016leakage,
  title =        {Leakage-Resilient Layout Randomization for Mobile
                  Devices},
  author =       {Braden, Kjell and Davi, Lucas and Liebchen,
                  Christopher and Sadeghi, Ahmad-Reza and Crane,
                  Stephen and Franz, Michael and Larsen, Per},
  booktitle =    {NDSS},
  year =         2016,
  organization = {Internet Society}
}

@misc{pwn2own2018,
  author =       {Chris Brook},
  title =        {Firefox, {Safari}, {Edge} All Fall at {Pwn2Own}
                  2018},
  howpublished = {
                  \url{https://digitalguardian.com/blog/firefox-safari-edge-all-fall-pwn2own-2018}},
  year =         2018,
}

@InProceedings{privtrans,
  title =        {Privtrans: Automatically partitioning programs for
                  privilege separation},
  author =       {Brumley, David and Song, Dawn},
  booktitle =    {Security},
  year =         2004,
  organization = {USENIX}
}

@InProceedings{aiken-kernel-ptr,
  title =        {Verifying the Safety of User Pointer Dereferences},
  author =       {Bugrara, Suhabe and Aiken, Alex},
  booktitle =    {S\&P},
  publisher =    {IEEE},
  year =         2008,
}

@Misc{libjpeg-rce,
  key =          {Bugzilla Bug 759802},
  title =        {({CVE-2012-2806}) Null-pointer execution/null out of
                  bounds write at libjpeg/jdmarker.c},
  howpublished = {
                  \url{https://bugzilla.mozilla.org/show_bug.cgi?id=759802}},
  year =         2012
}

@misc{bugzilla-1471535,
  key = {Bugzilla Bug 1471535},
  title = {Run all {MediaDataDecoder} in their own decoder process},
  howpublished = {
                  \url{https://bugzilla.mozilla.org/show_bug.cgi?id=1471535}},
  year = 2018
}

@misc{bugzilla-1506291,
  key =          {Bugzilla Bug 1506291},
  title =        {Linux sandboxing for the media decoder process
                  ({RDD})},
  howpublished = {
                  \url{https://bugzilla.mozilla.org/show_bug.cgi?id=1506291}},
  year =         2018
}

@Misc{bytecode-alliance,
  key =        {{Bytecode Alliance}},
  title =        {{Bytecode Alliance}},
  howpublished = {\url{https://bytecodealliance.org/press/formation}},
  year =         2019
}

%% C

@inproceedings{dataflow-integrity,
  author =       {Castro, Miguel and Costa, Manuel and Harris, Tim},
  title =        {Securing Software by Enforcing Data-flow Integrity},
  booktitle =    {Proceedings of OSDI 2006},
  year =         2006,
  organization = {USENIX}
}

@InProceedings{castro-et-al:bgi:sosp09,
  author =       {Miguel Castro and Jean-Philippe Martin and Marcus
                  Peinado and Periklis Akritidis and Austin Donnelly
                  and Manuel Costa and Paul Barham and Richard Black},
  title =        {Fast Byte-Granularity Software Fault Isolation},
  booktitle =    {Proceedings of SOSP 2009},
  year =         2009,
  organization = {ACM}
}

@Misc{skia-rce-1,
  key =          {Chromium Issue 850350},
  title =        {Security: stack-buffer-overflow in Break},
  howpublished = {
                  \url{https://bugs.chromium.org/p/chromium/issues/detail?id=850350}},
  year =         2019
}

@misc{site-isolation-chrome,
  key =          {Chromium Security},
  title =        {Site Isolation},
  howpublished = {
                  \url{https://www.chromium.org/Home/chromium-security/site-isolation}},
  year =         2019
}

@inproceedings{bmc,
  author =       {Clarke, Edmund and Kroening, Daniel and Lerda,
                  Flavio},
  title =        {A Tool for Checking {ANSI}-{C} Programs},
  booktitle =    {Proceedings of TACAS 2004},
  year =         2004,
  publisher =    {Springer},
}

@InProceedings{readactor,
  title =        {Readactor: Practical Code Randomization Resilient to
                  Memory Disclosure},
  author =       {Crane, Stephen and Liebchen, Christopher and
                  Homescu, Andrei and Davi, Lucas and Larsen, Per and
                  Sadeghi, Ahmad-Reza and Brunthaler, Stefan and
                  Franz, Michael},
  booktitle =    {S\&P},
  publisher =    {IEEE},
  year =         2015,
}

@Misc{cranelift-speedup,
  author = {Lars T Hansen},
  title  = {{Cranelift: Performance parity with Baldr on x86-64}},
  howpublished = {
  \url{https://bugzilla.mozilla.org/show_bug.cgi?id=1539399}},
  year =      2019,
}


%% D

@Misc{UXSS,
 author={Di Paola, Stefano and Fedon, Giorgio},
  title =     {Subverting {Ajax}},
  howpublished = {Presented at 23C3},
  year =      2006
}

%% F

@inproceedings{Singularity,
  title =        {Language support for fast and reliable message-based
                  communication in Singularity OS},
  author =       {F{\"a}hndrich, Manuel and Aiken, Mark and
                  Hawblitzel, Chris and Hodson, Orion and Hunt, Galen
                  and Larus, James R and Levi, Steven},
  key =          {Faehndrich},
  booktitle =    {Proceedings of EuroSys 2006},
  year =         2006,
  organization = {ACM}
}

@inproceedings{vx32,
  title =        {Vx32: Lightweight User-level Sandboxing on the {x86}},
  author =       {Ford, Bryan and Cox, Russ},
  booktitle =    {Proceedings of USENIX ATC 2008},
  year =         2008,
  organization = {USENIX}
}

@phdthesis{cqual,
  title =        {Type qualifiers: lightweight specifications to
                  improve software quality},
  author =       {Foster, Jeffrey Scott},
  year =         2002,
  school =       {Berkeley}
}

@Misc{moz-blog,
  author = {Nathan Froyd},
  title  = {{Securing Firefox With WebAssembly}},
  howpublished = {
  \url{https://hacks.mozilla.org/2020/02/securing-firefox-with-webassembly/}},
  year =      2020,
}


%% G

@article{OP-browser,
  author =       {Grier, Chris and Tang, Shuo and King, Samuel T.},
  title =        {Designing and Implementing the {OP} and {OP2} {Web}
                  Browsers},
  journal =      {ACM Transactions on the Web},
  volume =       5,
  number =       2,
  year =         2011
}

@inproceedings{dart,
  author =       {Godefroid, Patrice and Klarlund, Nils and Sen,
                  Koushik},
  title =        {{DART}: Directed Automated Random Testing},
  booktitle =    {Proceedings of PLDI 2005},
  year =         2005,
  organization = {ACM}
}

@article{libvm,
  title =        {{LibVM}: an architecture for shared library
                  sandboxing},
  author =       {Goonasekera, Nuwan and Caelli, William and Fidge,
                  Colin},
  journal =      {Software: Practice and Experience},
  volume =       45,
  number =       12,
  year =         2015,
  publisher =    {Wiley}
}

@InProceedings{soaap,
  title =        {Clean application compartmentalization with SOAAP},
  author =       {Gudka, Khilan and Watson, Robert NM and Anderson,
                  Jonathan and Chisnall, David and Davis, Brooks and
                  Laurie, Ben and Marinos, Ilias and Neumann, Peter G
                  and Richardson, Alex},
  booktitle =    {CCS},
  year =         2015,
  organization = {ACM}
}

@Misc{nacl-deprecate,
  author =       {{Google Chrome Team}},
  title =        {{(P)NaCl Deprecation Announcements}},
  howpublished = {
  \url{https://developer.chrome.com/native-client/migration#p-nacl-deprecation-announcements}},
  year =         2017
}

@Misc{graphite-vulnlist-1,
  author =       {{Stefan Marsiske, Pierre Pronchery, Marcus Bointon}},
  title =        {{Penetration Test Report: Graphite font system}},
  howpublished = {
  \url{https://wiki.mozilla.org/images/9/98/Graphite-report.pdf}},
  year =         2017
}

@Misc{graphite-vulnlist-2,
  author =       {{Yves Younan}},
  title =        {{Vulnerability Spotlight: Libgraphite Font Processing 
  Vulnerabilities}},
  howpublished = {
  \url{https://blog.talosintelligence.com/2016/02/vulnerability-spotlight-libgraphite.html}},
  year =         2016
}
@Misc{graphite,
  key = {Graphite},
  title = {{Graphite - A free and open rendering engine for complex scripts}},
  howpublished = {\url{http://scripts.sil.org/RenderingGraphite}},
  year =         2012
}

@Misc{github-zero-cost,
  key = {zero cost},
  title = {{Optimized transitions for Lucet compiler}},
  howpublished = {
  \url{https://github.com/bytecodealliance/cranelift/issues/1083}},
  year = 2019
}

@InProceedings{deepak-popl20,
  title={The high-level benefits of low-level sandboxing},
  author={Sammler, Michael and Garg, Deepak and Dreyer, Derek and Litak, 
  Tadeusz},
  booktitle={POPL},
  year={2019},
  publisher={ACM}
}

%% H

@InProceedings{wasm,
  title =        {Bringing the web up to speed with WebAssembly},
  author =       {Haas, Andreas and Rossberg, Andreas and Schuff,
                  Derek L and Titzer, Ben L and Holman, Michael and
                  Gohman, Dan and Wagner, Luke and Zakai, Alon and
                  Bastien, JF},
  booktitle =    {PLDI},
  year =         2017,
  organization = {ACM}
}

@InProceedings{DUI,
  author =       {Hu, Hong and Chua, Zheng Leong and Liang, Zhenkai
                  and Saxena, Prateek},
  title =        {Identifying Arbitrary Memory Access Vulnerabilities
                  in Privilege-Separated Software},
  booktitle =    {ESORICS},
  year =         2015,
  publisher =    {Springer},
  volume =       9326,
  series =       {LNCS}
}

%% J

@InProceedings{jia-et-al:weblocal:ccs16,
  author =       {Yaoqi Jia and Zheng Leong Chua and Hong Hu and Shuo
                  Chen and Prateek Saxena and Zhenkai Liang},
  title =        {The ``{Web}/Local'' Boundary Is Fuzzy: A Security
                  Study of {Chrome}'s Process-Based Sandboxing},
  booktitle =    {CCS},
  year =         2016,
  organization = {ACM}
}

@inproceedings{cyclone,
  author =       {Jim, Trevor and Morrisett, Greg and Grossman, Dan
                  and Hicks, Michael and Cheney, James and Wang,
                  Yanling},
  title =        {Cyclone: A Safe Dialect of {C}},
  booktitle =    {Proceedings of USENIX ATC 2002},
  year =         2002,
  organization = {USENIX}
}

@inproceedings{cqual-kernel-ptr,
  title =        {Finding User/Kernel Pointer Bugs with Type
                  Inference},
  author =       {Johnson, Rob and Wagner, David},
  booktitle =    {Security},
  year =         2004,
  organization = {USENIX}
}

@inproceedings{not-so-fast,
  title={Not so fast: analyzing the performance of webassembly vs. native code},
  author={Jangda, Abhinav and Powers, Bobby and Berger, Emery D and Guha, 
  Arjun},
  booktitle =    {ATC},
  organization = {USENIX},
  year=2019
}

%% K

@inproceedings{privman,
  title =        {Privman: A Library for Partitioning Applications},
  author =       {Kilpatrick, Douglas},
  booktitle =    {ATC},
  year =         2003,
  organization = {USENIX}
}

@InProceedings {spectre,
  author =       {Paul Kocher and Jann Horn and Anders Fogh and Daniel
                  Genkin and Daniel Gruss and Werner Haas and Mike
                  Hamburg and Moritz Lipp and Stefan Mangard and
                  Thomas Prescher and Michael Schwarz and Yuval Yarom},
  title =        {Spectre Attacks: Exploiting Speculative Execution},
  booktitle =    {S\&P},
  publisher =    {IEEE},
  year =         2019,
}

@inproceedings{memsentry,
  author =       {Koning, Koen and Chen, Xi and Bos, Herbert and
                  Giuffrida, Cristiano and Athanasopoulos, Elias},
  title =        {No Need to Hide: Protecting Safe Regions on
                  Commodity Hardware},
  booktitle =    {EuroSys},
  year =         2017,
  organization = {ACM}
}

@TechReport{bakersfield,
  author =       {Joshua A. Kroll and Drew Dean},
  title =        {{BakerSFIeld}: Bringing Software Fault Isolation to
                  {x64}},
  institution =  {SRI Computer Science Laboratory},
  year =         2009
}

@inproceedings{psfi,
  title =        {Portable software fault isolation},
  author =       {Kroll, Joshua A. and Stewart, Gordon and Appel,
                  Andrew W.},
  booktitle =    {CSF},
  year =         2014,
  organization = {IEEE}
}

@misc{ffjsfuzz,
  title =        {{JavaScript} Fuzzing in {Mozilla}, 2017},
  author =       {Gary Kwong},
  howpublished = {Presented at COSCUP 2017.  
                  \url{https://nth10sd.github.io/js-fuzzing-in-mozilla/}},
  year =         2017,
}


%% L

@InProceedings{lamowski-et-al:sandcrust:plos17,
  author =       {Benjamin Lamowski and Carsten Weinhold and Adam
                  Lackorzynski and Hermann H{\"a}rtig},
  title =        {Sandcrust: Automatic Sandboxing of Unsafe Components
                  in {Rust}},
  booktitle =    {PLOS},
  year =         2017,
  organization = {ACM}
}

@inproceedings{ptrsplit,
  title =        {{PtrSplit}: Supporting General Pointers in Automatic
                  Program Partitioning},
  author =       {Liu, Shen and Tan, Gang and Jaeger, Trent},
  booktitle =    {CCS},
  year =         2017,
  organization = {ACM}
}

@inproceedings{ASLR-guard,
  author =       {Lu, Kangjie and Song, Chengyu and Lee, Byoungyoung
                  and Chung, Simon P. and Kim, Taesoo and Lee, Wenke},
  title =        {{ASLR}-{Guard}: Stopping Address Space Leakage for
                  Code Reuse Attacks},
  booktitle =    {CCS},
  year =         2015,
  organization = {ACM}  
}

%% M

@InProceedings{mao-et-al:lxfi:sosp11,
  author =       {Yandong Mao and Haogang Chen and Dong Zhou and Xi
                  Wang and Nickolai Zeldovich and M. Frans Kaashoek},
  title =        {Software Fault Isolation with {API} Integrity and
                  Multi-Principal Modules},
  booktitle =    {SOSP},
  year =         2011,
  organization = {ACM}
}

@InProceedings{pittsfield,
  author =       {McCamant, Stephen and Morrisett, Greg},
  title =        {Evaluating {SFI} for a {CISC} Architecture},
  booktitle =    {Security},
  year =         2006,
  publisher =    {USENIX}
}

@misc{moz-ipdl,
  key =          {{MDN} web docs},
  title =        {{IPDL} Tutorial},
  howpublished = {
                  \url{https://developer.mozilla.org/en-US/docs/Mozilla/IPDL/Tutorial}},
  year =         2019,
}

@InProceedings{rocksalt,
  author =       {Greg Morrisett and Gang Tan and Joseph Tassarotti
                  and Jean-Baptiste Tristan and Edward Gan},
  title =        {{RockSalt}: Better, Faster, Stronger {SFI} for the
                  {x86}},
  booktitle =    {PLDI},
  year =         2012,
  organization = {ACM}
}

@Misc{e10s,
  key =          {Mozilla Wiki},
  title =        {Electrolysis},
  howpublished = {\url{https://wiki.mozilla.org/Electrolysis}},
  year =         2018
}

@misc{firefox-talos,
  key =          {Mozilla Wiki},
  title =        {Performance Sheriffing/{Talos}},
  howpublished = {
                  \url{https://wiki.mozilla.org/Performance_sheriffing/Talos}},
  year =         2018,
}

@Misc{site-isolation-firefox,
  key =          {Mozilla Wiki},
  title =        {Project {F}ission},
  howpublished = {\url{https://wiki.mozilla.org/Project_Fission}},
  year =         2019,
}

@Misc{mozilla-sandbox,
  key =          {Mozilla Wiki},
  title =        {Security/Sandbox},
  howpublished = {
                  \url{https://wiki.mozilla.org/Security/Sandbox}},
  year =         2018
}

@inproceedings{disaggregation,
  title =        {Privilege separation made easy: trusting small
                  libraries not big processes},
  author =       {Murray, Derek G and Hand, Steven},
  booktitle =    {EuroSec},
  year =         2008,
  organization = {ACM}
}

@misc{mod_markdown,
  key =          {mod_markdown},
  title =        {Markdown filter module for Apache HTTPD Server},
  howpublished = {
  \url{https://github.com/hamano/apache-mod-markdown}},
  year =         2011,
}

%% N

@article{ccured,
  author =       {Necula, George C. and Condit, Jeremy and Harren,
                  Matthew and McPeak, Scott and Weimer, Westley},
  title =        {{CCured}: Type-safe Retrofitting of Legacy Software},
  journal =      {ACM Transactions on Programming Languages and
                  Systems},
  volume =       27,
  number =       3,
  year =         2005
}

@Misc{skia-rce-android,
  author =       {Shaun Nichols},
  title =        {It's 2019, and a {PNG} file can pwn your {Android}
                  Smartphone or Tablet: Patch Me If You Can},
  howpublished = {
                  \url{https://www.theregister.co.uk/2019/02/07/android_january_patches/}},
  year =         2019
}

@InProceedings{niu-tan:upro:stc12,
  author =       {Ben Niu and Gang Tan},
  title =        {Enforcing User-Space Privilege Separation with
                  Declarative Architectures},
  booktitle =    {Proceedings of STC 2012},
  year =         2012,
  organization = {ACM}
}

@Misc{node_bcrypt,
  key =          {node_bcrypt},
  title =        {bcrypt for NodeJs},
  howpublished = {
  \url{https://github.com/kelektiv/node.bcrypt.js}},
  year =         2010
}

@misc{gobi,
  title={Gobi: WebAssembly as a Practical Path to Library Sandboxing},
  author={Shravan Narayan and Tal Garfinkel and Sorin Lerner and Hovav Shacham 
  and Deian Stefan},
  year={2019},
  eprint={1912.02285},
  archivePrefix={arXiv},
  primaryClass={cs.CR}
}

%% P

@inproceedings{provos_openssh,
  title =        {Preventing Privilege Escalation},
  author =       {Provos, Niels and Friedl, Markus and Honeyman,
                  Peter},
  booktitle =    {Security},
  year =         2003,
  organization = {USENIX}
}

@Misc{nasm,
  author =       {H. Peter Anvin},
  title =        {NASM - The Netwide Assembler},
  howpublished = {\url{https://nasm.us/}},
}

%% Q

@InProceedings{libsec,
  title =        {Libsec: A Hardware Virtualization-Based Isolation
                  for Shared Library},
  author =       {Qiang, Weizhong and Cao, Yong and Dai, Weiqi and
                  Zou, Deqing and Jin, Hai and Liu, Benxi},
  booktitle =    {Proceedings of HPCC 2017},
  year =         2017,
  organization = {IEEE}
}

%% R

@inproceedings{reis-isolating,
  author =       {Reis, Charles and Gribble, Steven D.},
  title =        {Isolating {Web} Programs in Modern Browser
                  Architectures},
  booktitle =    {EuroSys},
  year =         2009,
  organization = {ACM}
}

@Article{rop,
  author =       {Ryan Roemer and Erik Buchanan and Hovav Shacham and
                  Stefan Savage},
  title =        {Return-Oriented Programming: Systems, Languages, and
                  Applications},
  journal =      {ACM Transactions on Information and System Security},
  year =         2012,
  volume =       15,
  number =       1,
}

@Misc{rlbox-sources,
  key =          {rlbox-sources},
  title =        {Root Repo for the {RLBox} Sandboxing Library Research 
  prototype},
  howpublished = {
  \url{https://github.com/shravanrn/LibrarySandboxing}},
  year =         2018
}

@Misc{rlbox-prod,
  key =          {rlbox-prod},
  title =        {Implementation of the {RLBox} sandboxing {APIs} in {C++} 17},
  howpublished = {\url{https://rlbox.dev}},
  year =         2019
}

%% S

@Comment this is a post-proceedings
@InProceedings{ibos,
  title =        {{IBOS}: A correct-by-construction modular browser},
  author =       {Sasse, Ralf and King, Samuel T and Meseguer,
                  Jos{\'e} and Tang, Shuo},
  booktitle =    {FACS},
  year =         2013,
  volume =       7684,
  organization = {Springer}
}

                

@article{c-strider,
  title =        {C-strider: type-aware heap traversal for {C}},
  author =       {Saur, Karla and Hicks, Michael and Foster, Jeffrey
                  S},
  journal =      {Software: Practice and Experience},
  volume =       46,
  number =       6,
  year =         2016,
  publisher =    {Wiley}
}

@InProceedings{schroeder-saltzer:rings:sosp71,
  author =       {Michael D. Schroeder and Jerome H. Saltzer},
  title =        {A Hardware Architecture for Implementing Protection
                  Rings},
  booktitle =    {Proceedings of SOSP 1971},
  year =         1971,
  organization = {ACM}
}

@inproceedings{double-fetch-hardware,
  author =       {Michael Schwarz and Daniel Gruss and Moritz Lipp and
                  Cl\'ementine Maurice and Thomas Schuster and Anders
                  Fogh and Stefan Mangard},
  title =        {Automated Detection, Exploitation, and Elimination
                  of Double-Fetch Bugs using Modern CPU Features},
  booktitle =    {AsiaCCS},
  year =         2018,
  organization = {ACM}
}

@InProceedings{sop,
  author =       {J{\"o}rg Schwenk and Marcus Niemietz and Christian
                  Mainka},
  title =        {Same Origin Policy: Evaluation in Modern Browsers},
  booktitle =    {Security},
  year =         2017,
  organization = {USENIX}
}

@Misc{minsfi,
  author =       {Mark Seaborn},
  title =        {Sandboxing Libraries in {Chrome} using {SFI}: {zlib}
                  Proof-of-Concept},
  howpublished = {
  \url{https://docs.google.com/presentation/d/1RD3bxsBfTZOIfrlq7HzGMsygPHgb61A1eTdelIYOurs/}},
  year =         2013
}

@inproceedings{cute,
  author =       {Sen, Koushik and Marinov, Darko and Agha, Gul},
  title =        {{CUTE}: A Concolic Unit Testing Engine for {C}},
  booktitle =    {Proceedings of FSE 2005},
  year =         2005,
  organization = {ACM}
}

@InProceedings{nacl-amd64,
  author =       {David Sehr and Robert Muth and Cliff Biffle and
                  Victor Khimenko and Egor Pasko and Karl Schimpf and
                  Bennet Yee and Brad Chen},
  title =        {Adapting Software Fault Isolation to Contemporary
                  {CPU} Architectures},
  booktitle =    {Security},
  year =         2010,
  organization = {USENIX}
}

@inproceedings{shacham-aslr,
  title =        {On the Effectiveness of Address-Space Randomization},
  author =       {Shacham, Hovav and Page, Matthew and Pfaff, Ben and
                  Goh, Eu-Jin and Modadugu, Nagendra and Boneh, Dan},
  booktitle =    {CCS},
  year =         2004,
  organization = {ACM}
}

@Article{shu-isolation-survey,
  author =       {Rui Shu and Peipei Wang and Gorski, III, Sigmund
                  A. and Benjamin Andow and Adwait Nadkarni and Luke
                  Deshotels and Jason Gionta and William Enck and
                  Xiaohui Gu},
  title =        {A Study of Security Isolation Techniques},
  journal =      {ACM Computing Surveys},
  year =         2016,
  volume =       49,
  number =       3,
}

@InProceedings{robusta,
  author =       {Joseph Siefers and Gang Tan and Greg Morrisett},
  title =        {Robusta: Taming the Native Beast of the {JVM}},
  booktitle =    {Proceedings of CCS 2010},
  year =         2010,
  organization = {ACM}
}

@article{misfit,
  title =        {{MiSFIT}: Constructing safe extensible systems},
  author =       {Small, Christopher and Seltzer, Margo},
  journal =      {IEEE concurrency},
  volume =       6,
  number =       3,
  year =         1998,
  publisher =    {IEEE}
}

@InProceedings{sanitization-survey,
  author =       {Dokyung Song and Julian Lettner and Prabhu
                  Rajasekaran and Yeoul Na and Stijn Volckaert and Per
                  Larsen and Michael Franz},
  title =        {{SoK}: Sanitizing for Security},
  booktitle =    {IEEE Security and Privacy 2019},
  year =         2019,
}

@InCollection{cpp_pl,
  author =       {Bjarne Stroustrup},
  booktitle =    {The {C}++ Programming Language},
  chapter =      13,
  title =        {Exception Handling (and {RAII})},
  publisher =    {Addison-Wesley},
  year =         2013,
  edition =      {4th},
}

@InProceedings{arabica,
  author =       {Sun, Mengtao and Tan, Gang},
  title =        {{JVM}-Portable Sandboxing of {Java}'s Native
                  Libraries},
  booktitle =    {Proceedings of ESORICS 2012},
  year =         2012,
  publisher =    {Springer},
  volume =       7459,
  series =       {LNCS}
}

@InProceedings{sun-tan:nativeguard:wisec14,
  author =       {Mengtao Sun and Gang Tan},
  title =        {{NativeGuard}: Protecting {Android} Applications
                  from Third-Party Native Libraries},
  booktitle =    {Proceedings of WiSec 2014},
  year =         2014,
  organization = {ACM}
}

@Article{robusta-arabica,
  author =       {Mengtao Sun and Gang Tan and Joseph Siefers and Bin
                  Zeng and Greg Morrisett},
  title =        {Bringing {Java}'s Wild Native World under Control},
  journal =      {ACM Transactions on Information and System Security},
  year =         2013,
  volume =       16,
  number =       3,
}

%% T

@Article{tan-sfi-survey,
  author =       {Gang Tan},
  title =        {Principles and Implementation Techniques of
                  Software-Based Fault Isolation},
  journal =      {Foundations and Trends in Privacy and Security},
  year =         2017,
  volume =       1,
  number =       3,
}

@Misc{theora-encoding,
  key =          {theora-encoding},
  title =        {A Brief {T}heora and {V}orbis Encoding Guide},
  howpublished = {
  \url{https://trac.ffmpeg.org/wiki/TheoraVorbisEncodingGuide}},
  year =         2019
}

%% V

@Misc{vp9-encoding,
  key   =        {vp9-encoding},
  title =        {{VP9} Bitrate Modes in Detail},
  howpublished = {
  \url{https://developers.google.com/media/vp9/bitrate-modes/}},
  year =         2019
}

@Misc{vpxbug,
  key =          {Bugzilla Bug 1192226},
  title =        {{Bug 1192226 (CVE-2015-4506) vp9 init context buffers}},
  howpublished = {
  \url{https://bugzilla.mozilla.org/show_bug.cgi?id=1192226}},
  year =         2015
}

@Misc{oggbug,
  key =          {Bugzilla Bug 1446062 },
  title =        {{Bug 1446062 (CVE-2018-5146) ZDI-CAN-5822 - Mozilla Firefox Audio Driver Out of Bounds}},
  howpublished = {
  \url{https://bugzilla.mozilla.org/show_bug.cgi?id=1446062}},
  year =         2018
}


@Book{sfinae,
  author =       {David Vandevoorde and Nocolai M. Josuttis},
  title =        {C++ Templates: The Complete Guide},
  publisher =    {Addison-Wesley Professional},
  year =         2002,
  edition =      {First}
}

@InProceedings{malloc-zero,
  title =        {Zero-sized Heap Allocations Vulnerability Analysis},
  author =       {Vanegue, Julien},
  booktitle =    {Proceedings of WOOT 2010},
  year =         2010,
  organization = {USENIX}
}

@InProceedings{vassena2016flexible,
  title =        {Flexible Manipulation of Labeled Values for
                  Information-Flow Control Libraries},
  author =       {Vassena, Marco and Buiras, Pablo and Waye, Lucas and
                  Russo, Alejandro},
  booktitle =    {Proceedings of ESORICS 2016},
  year =         2016,
  volume =       9878,
  series =       {LNCS},
  organization = {Springer}
}

@inproceedings{erim,
  title={{ERIM}: Secure, Efficient In-process Isolation with Protection Keys ({MPK})},
  author={Vahldiek-Oberwagner, Anjo and Elnikety, Eslam and Duarte, Nuno O and
    Sammler, Michael and Druschel, Peter and Garg, Deepak},
  booktitle={Security},
  year={2019},
  organization = {USENIX}
}

%% W

@InProceedings{wahbe-et-al:sfi:sosp93,
  author =       {Robert Wahbe and Steven Lucco and Thomas E. Anderson
                  and Susan L. Graham},
  title =        {Efficient Software-Based Fault Isolation},
  booktitle =    {SOSP},
  year =         1993,
  organization = {ACM}
}

@InProceedings{gazelle,
  author =       {Helen J. Wang and Chris Grier and Alexander Moshchuk
                  and Samuel T. King and Piali Choudhury and
                  Herman Venter},
  title =        {The Multi-Principal {OS} Construction of the
                  {Gazelle} Web Browser},
  booktitle =    {Security},
  year =         2009,
  publisher =    {USENIX}
}

@inproceedings{double-fetch-static-analysis,
  author =       {Wang, Pengfei and Krinke, Jens and Lu, Kai and Li,
                  Gen and Dodier-Lazaro, Steve},
  title =        {How Double-fetch Situations Turn into Double-fetch
                  Vulnerabilities: A Study of Double Fetches in the
                  Linux Kernel},
  booktitle =    {Security},
  year =         2017,
  organization = {USENIX}
}

@inproceedings{codejail,
  title =        {Codejail: Application-Transparent Isolation of
                  Libraries with Tight Program Interactions},
  author =       {Wu, Yongzheng and Sathyanarayan, Sai and Yap, Roland
                  H.C. and Liang, Zhenkai},
  booktitle =    {ESORICS},
  year =         2012,
  publisher =    {Springer},
  volume =       7459,
  series =       {LNCS}
}

%% X

@Misc{xiph-media,
  key =          {Xiph.org Test Media},
  title =        {Xiph.org Test Media},
  howpublished = {\url{https://media.xiph.org/}},
  year =         2019,
}

@inproceedings{xu2018precise,
  title =        {Precise and Scalable Detection of Double-Fetch Bugs
                  in {OS} Kernels},
  author =       {Xu, Meng and Qian, Chenxiong and Lu, Kangjie and
                  Backes, Michael and Kim, Taesoo},
  year =         2018,
  booktitle =    {S\&P},
  publisher =    {IEEE}
}

%% Y

@InProceedings{yang-et-al:dead-store:usec17,
  author =       {Zhaomo Yang and Brian Johannesmeyer and Andres Trier
                  Olesen and Sorin Lerner and Kirill Levchenko},
  title =        {Dead Store Elimination (Still) Considered Harmful},
  booktitle =    {Security},
  year =         2017,
  organization = {USENIX}
}

@inproceedings{nacl,
  title =        {{Native} {Client}: A Sandbox for Portable, Untrusted
                  {x86} Native Code},
  author =       {Yee, Bennet and Sehr, David and Dardyk, Gregory and
                  Chen, J Bradley and Muth, Robert and Ormandy, Tavis
                  and Okasaka, Shiki and Narula, Neha and Fullagar,
                  Nicholas},
  booktitle =    {S\&P},
  publisher =    {IEEE},
  year =         2009,
}

%% [end]

@misc{blind-sys,
  title = {{Sys}: a Static/Symbolic Tool for Finding Good Bugs in Very Good Code},
  author = {{---}},
  howpublished = {Anonymized for double blind}
}

@misc{blind-gsoc,
  title = {Toolkit for  sandboxing third-parties libraries in {F}irefox},
  author = {{---}},
  howpublished = {Anonymized for double blind}
}

@misc{ff-integration,
  title = {Use {Wasm} sandboxed libraries in {F}irefox to reduce attack 
  surface},
  author = {{Shravan Narayan}},
  howpublished = {
  \url{https://bugzilla.mozilla.org/show_bug.cgi?id=1562797}}
}

@misc{tor-integration,
  title = {Use {RLBox} for sandboxing third-party libraries},
  author = {{Georg Koppen}},
  howpublished = {
  \url{https://trac.torproject.org/projects/tor/ticket/32379}}
}

@inproceedings {site-isolation-usenix,
	author = {Charles Reis and Alexander Moshchuk and Nasko Oskov},
	title = {Site Isolation: Process Separation for Web Sites within the Browser},
  booktitle={{USENIX} Security Symposium},
	year = {2019},
	publisher = {{USENIX} Association},
}


@inproceedings{fuzzyfox,
  title={Trusted browsers for uncertain times},
  author={Kohlbrenner, David and Shacham, Hovav},
  booktitle={Security},
	publisher = {USENIX},
  year={2016}
}

@inproceedings {rlbox-paper,
author = {Shravan Narayan and Craig Disselkoen and Tal Garfinkel and Nathan Froyd and Eric Rahm and Sorin Lerner and Hovav Shacham and Deian Stefan},
title = {Retrofitting Fine Grain Isolation in the Firefox Renderer},
booktitle = {29th USENIX Security Symposium (USENIX Security 20)},
year = {2020},
isbn = {978-1-939133-17-5},
pages = {699--716},
url = {https://www.usenix.org/conference/usenixsecurity20/presentation/narayan},
publisher = {USENIX Association},
month = aug,
}


@misc{extended,
  author    = {Shravan Narayan and Craig Disselkoen and Tal Garfinkel and Nathan Froyd and Eric Rahm and Sorin Lerner and Hovav Shacham and Deian Stefan},
  title     = {Retrofitting Fine Grain Isolation in the {F}irefox Renderer: Extended Version},
  year      = {2020},
  howpublished = {\url{https://arxiv.org/abs/2003.00572}}
}

@misc{mpx,
 key = {MPX},
 title = {Intel Memory Protection Extensions (MPX)},
 howpublished = {\url{https://software.intel.com/en-us/isa-extensions/intel-mpx}},
 year = 2018
}

@misc{wasi-clang,
 key = {WASI SDK},
 title = {wask-sdk developers. wasi-sdk.},
 howpublished = {\url{https://github.com/WebAssembly/wasi-sdk}},
 year = 2022
}


@InProceedings{tobinhochstadt_et_al:LIPIcs:2017:7120,
  author =	{Sam Tobin-Hochstadt and Matthias Felleisen and Robert Findler and Matthew Flatt and Ben Greenman and Andrew M. Kent and Vincent St-Amour and T. Stephen Strickland and Asumu Takikawa},
  title =	{{Migratory Typing: Ten Years Later}},
  booktitle =	{2nd Summit on Advances in Programming Languages (SNAPL 2017)},
  pages =	{17:1--17:17},
  year =	{2017},
  volume =	{71},
}

@misc{checkedc-tech-report,
 author = {Liyi Li and Yiyun Liu and Deena Postol and Leonidas Lampropoulos and David Van Horn and Michael Hicks},
 title = {{A Formal Model of Checked C} (Extended Version)},
 howpublished = {\url{https://arxiv.org/abs/2201.13394}},
 year = {2022},
 urldate = {2022-01-31}
}

@article{wright94syntactic,
  author = {Andrew K. Wright and Matthias Felleisen},
  title = {A syntactic approach to type soundness},
  journal = {Information and computation},
  volume = 115,
  number = 1,
  year = 1994
}

@article{milner78polymorphism,
  author = {Robin Milner},
  year = 1978,
  title = {A theory of type polymorphism in programming},
  journal = {J. Comput. System Sci.},
  volume = 17,
  number = 3
}  

@inproceedings{Matsakis:2014:RL:2663171.2663188,
 author = {Matsakis, Nicholas D. and Klock,II, Felix S.},
 title = {The Rust Language},
 booktitle = {ACM SIGAda Annual Conference on High Integrity Language Technology},
 year = {2014},
}

@article{Jung:2017:RSF:3177123.3158154,
 author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
 title = {RustBelt: Securing the Foundations of the Rust Programming Language},
 journal = {Proc. ACM Program. Lang.},
 volume = {2},
 number = {POPL},
 year = {2017},
}

@article{Greenman:2018:STS:3243631.3236766,
 author = {Greenman, Ben and Felleisen, Matthias},
 title = {A Spectrum of Type Soundness and Performance},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {September 2018},
 volume = {2},
 number = {ICFP},
 year = {2018},
}

@inproceedings{Takikawa:2016:SGT:2837614.2837630,
 author = {Takikawa, Asumu and Feltey, Daniel and Greenman, Ben and New, Max S. and Vitek, Jan and Felleisen, Matthias},
 title = {Is Sound Gradual Typing Dead?},
 booktitle = {POPL},
 year = {2016},
} 

@inproceedings{li22checkedc,
  author = {Liyi Li and Yiyun Liu and Deena L. Postol and Leonidas Lampropoulos and David Van Horn and Michael Hicks},
  title = {A Formal Model of {Checked C}},
  booktitle = {Proceedings of the Computer Security Foundations Symposium (CSF)},
  month = Aug,
  year = 2022
}


@misc{checkedc,
  author = {David Tarditi},
  title = {{Extending C with Bounds Safety and Improved Type Safety}},
  year = 2021,
  url = {https://github.com/secure-sw-dev/checkedc/},
  urldate = {2021-01-26}
}

@article{Refinementlh,
author = {Vazou, Niki and Seidel, Eric L. and Jhala, Ranjit and Vytiniotis, Dimitrios and Peyton-Jones, Simon},
title = {{Refinement Types for Haskell}},
year = {2014},
issue_date = {September 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {49},
number = {9},
issn = {0362-1340},
url = {https://doi.org/10.1145/2692915.2628161},
doi = {10.1145/2692915.2628161},
abstract = {SMT-based checking of refinement types for call-by-value languages is a well-studied
subject. Unfortunately, the classical translation of refinement types to verification
conditions is unsound under lazy evaluation. When checking an expression, such systems
implicitly assume that all the free variables in the expression are bound to values.
This property is trivially guaranteed by eager, but does not hold under lazy, evaluation.
Thus, to be sound and precise, a refinement type system for Haskell and the corresponding
verification conditions must take into account which subset of binders actually reduces
to values. We present a stratified type system that labels binders as potentially
diverging or not, and that (circularly) uses refinement types to verify the labeling.
We have implemented our system in LIQUIDHASKELL and present an experimental evaluation
of our approach on more than 10,000 lines of widely used Haskell libraries. We show
that LIQUIDHASKELL is able to prove 96% of all recursive functions terminating, while
requiring a modest 1.7 lines of termination-annotations per 100 lines of code.},
journal = {SIGPLAN Not.},
month = aug,
pages = {269–282},
numpages = {14}
}

@article{LiquidHaskell,
   title={{An Introduction to Liquid Haskell}},
   volume={237},
   ISSN={2075-2180},
   url={http://dx.doi.org/10.4204/EPTCS.237.5},
   DOI={10.4204/eptcs.237.5},
   journal={Electronic Proceedings in Theoretical Computer Science},
   publisher={Open Publishing Association},
   author={Peña, Ricardo},
   year={2017},
   month={Jan},
   pages={68–80}
}

@misc{c2rust,
  key = {c2rust},
  title = {{C} to Rust translation, refactoring, and cross-checking},
  howpublished = {\url{https://c2rust.com/}},
  year = 2018
}

% Time sensitive computation: Source transformers.
@inproceedings{molnar2005program,
  title={The program counter security model: Automatic detection and removal of control-flow side channel attacks},
  author={Molnar, David and Piotrowski, Matt and Schultz, David and Wagner, David},
  booktitle={International Conference on Information Security and Cryptology},
  pages={156--168},
  year={2005},
  organization={Springer}
}

% Time sensitive computation - special languages.
@inproceedings{cauligi2019fact,
  title={FaCT: a DSL for timing-sensitive computation},
  author={Cauligi, Sunjay and Soeller, Gary and Johannesmeyer, Brian and Brown, Fraser and Wahby, Riad S and Renner, John and Gr{\'e}goire, Benjamin and Barthe, Gilles and Jhala, Ranjit and Stefan, Deian},
  booktitle={Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages={174--189},
  year={2019}
}

@inproceedings{jim2002cyclone,
  title={Cyclone: a safe dialect of C.},
  author={Jim, Trevor and Morrisett, J Gregory and Grossman, Dan and Hicks, Michael W and Cheney, James and Wang, Yanling},
  booktitle={USENIX Annual Technical Conference, General Track},
  pages={275--288},
  year={2002}
}

@inproceedings{duck2016heap,
  title={Heap bounds protection with low fat pointers},
  author={Duck, Gregory J and Yap, Roland HC},
  booktitle={Proceedings of the 25th International Conference on Compiler Construction},
  pages={132--142},
  year={2016},
  organization={ACM}
}

@misc{cvetrend,
  title = {CVE trends},
  howpublished = {\url{https://www.cvedetails.com/vulnerabilities-by-types.php}},
  author={CVE Trends},
  year={2021},
  note = {Accessed: 2020-10-11}
}

@inproceedings{rajani2016access,
  title={On access control, capabilities, their equivalence, and confused deputy attacks},
  author={Rajani, Vineet and Garg, Deepak and Rezk, Tamara},
  booktitle={2016 IEEE 29th Computer Security Foundations Symposium (CSF)},
  pages={150--163},
  year={2016},
  organization={IEEE}
}

@misc{microsoftmemsafe,
  title = {Memory corruption is still the most prevalent security vulnerability},
  howpublished = {\url{https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/}},
  note = {Accessed: 2020-02-11},
  author={BlueHat},
  year={2019}
}

@article{zeng2019identifying,
  title={Identifying Barriers to Adoption for Rust through Online Discourse},
  author={Zeng, Anna and Crichton, Will},
  journal={arXiv preprint arXiv:1901.01001},
  year={2019}
}

@misc{checkedc:temporal,
  title = {The Benefits and Costs of Using Fat Pointers for Temporal Memory Safety},
  author = {Jie Zhou},
  howpublished = {Poster presentation at PLDI 2021 student research competition (silver medalist)},
  month = jun,
  year = 2021}
  
@article{emre2021c2rust,
  title={Translating {C} to Safer {Rust}},
  author={Mehmet Emre and Kyle Dewey and Ryan Schroeder and Ben Hardekopf},
  journal={In Proceedings of the 2021 ACM on Programming Languges (PACMPL)},
  volume={5},
  number={OOPSLA},
  optpages={1--35},
  year={2021},
  optpublisher={ACM New York, NY, USA}
}

@inproceedings{duanrefactoring,
  title={Refactoring the {FreeBSD} Kernel with {Checked C}},
  author={Duan, Junhan and Yang, Yudi and Zhou, Jie and Criswell, John},
year = {2020},
booktitle = {Proceedings of the 2020 IEEE Cybersecurity Development Conference (SecDev)},
}

@misc{c2rusttalk,
author = {Per Larson},
title = {Migrating Legacy Code to {Rust}},
howpublished = {RustConf 2018 talk},
month = aug,
year = 2018
}

@misc{c2rust,
  title = {C to rust translation, refactoring, and cross-checking},
  howpublished = {\url{https://c2rust.com/}},
  year = 2021,
}

@inproceedings{song2019sanitizing,
  title =	 {{SoK}: Sanitizing for Security},
  author =	 {Song, Dokyung and Lettner, Julian and Rajasekaran, Prabhu
                  and Na, Yeoul and Volckaert, Stijn and Larsen, Per
		  and Franz, Michael},
  booktitle =	 {Proceedings of the 2019 IEEE Symposium on Security and Privacy (S\&P)},
  year =	 {2019}
}

@inproceedings{redini2017bootstomp,
  title={Bootstomp: on the security of bootloaders in mobile devices},
  author={Redini, Nilo and Machiry, Aravind and Das, Dipanjan and Fratantonio, Yanick and Bianchi, Antonio and Gustafson, Eric and Shoshitaishvili, Yan and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={26th $\{$USENIX$\}$ Security Symposium ($\{$USENIX$\}$ Security 17)},
  pages={781--798},
  year={2017}
}

@inproceedings{ourwork,
author = {Machiry, Aravind and Touma, Hasan and Chen, Ray and Hicks, Micheal},
title = {Automated conversion of legacy code to Checked C},
booktitle = {IEEE Cybersecurity Development Conference 2019 (SecDev)},
year = {2019},
month = sep
}

@inproceedings{corina2017difuze,
  title={Difuze: Interface aware fuzzing for kernel drivers},
  author={Corina, Jake and Machiry, Aravind and Salls, Christopher and Shoshitaishvili, Yan and Hao, Shuang and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2123--2138},
  year={2017}
}

@inproceedings{machiry2017dr,
  title={$\{$DR$\}$.$\{$CHECKER$\}$: A soundy analysis for linux kernel drivers},
  author={Machiry, Aravind and Spensky, Chad and Corina, Jake and Stephens, Nick and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={26th $\{$USENIX$\}$ Security Symposium ($\{$USENIX$\}$ Security 17)},
  pages={1007--1024},
  year={2017}
}

@article{machiry2022c,
  title={C to Checked C by 3C},
  author={Machiry, Aravind and Kastner, John and McCutchen, Matt and Eline, Aaron and Headley, Kyle and Hicks, Michael},
  journal={Proceedings of the ACM on Programming Languages},
  volume={6},
  number={OOPSLA1},
  pages={1--29},
  year={2022},
  publisher={ACM New York, NY, USA}
}

@inproceedings{machiry2017boomerang,
  title={BOOMERANG: Exploiting the Semantic Gap in Trusted Execution Environments.},
  author={Machiry, Aravind and Gustafson, Eric and Spensky, Chad and Salls, Christopher and Stephens, Nick and Wang, Ruoyu and Bianchi, Antonio and Choe, Yung Ryn and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={NDSS},
  year={2017}
}

@misc{payer2019software,
  title={Software Security: Principles, Policies, and Protection},
  author={Payer, Mathias},
  year={2019},
  publisher={HexHive Books, April}
}

@article{costan2016intel,
  title={Intel SGX explained},
  author={Costan, Victor and Devadas, Srinivas},
  journal={Cryptology ePrint Archive},
  year={2016}
}

@inproceedings{ding2022velvet,
  title={VELVET: a noVel Ensemble Learning approach to automatically locate VulnErable sTatements},
  author={Ding, Yangruibo and Suneja, Sahil and Zheng, Yunhui and Laredo, Jim and Morari, Alessandro and Kaiser, Gail and Ray, Baishakhi},
  booktitle={2022 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  pages={959--970},
  year={2022},
  organization={IEEE}
}

@article{situ2021vulnerable,
  title={Vulnerable Region-Aware Greybox Fuzzing},
  author={Situ, Ling-Yun and Zuo, Zhi-Qiang and Guan, Le and Wang, Lin-Zhang and Li, Xuan-Dong and Shi, Jin and Liu, Peng},
  journal={Journal of Computer Science and Technology},
  volume={36},
  pages={1212--1228},
  year={2021},
  publisher={Springer}
}

@book{nelson1981remote,
  title={Remote procedure call},
  author={Nelson, Bruce Jay},
  year={1981},
  publisher={Carnegie Mellon University}
}

@article{mergendahlcross,
  title={Cross-Language Attacks},
  author={Mergendahl, Samuel and Burow, Nathan and Okhravi, Hamed},
  booktitle={NDSS},
  year={2022}
}

@inproceedings{jeon2017hextype,
  title={Hextype: Efficient detection of type confusion errors for c++},
  author={Jeon, Yuseok and Biswas, Priyam and Carr, Scott and Lee, Byoungyoung and Payer, Mathias},
  booktitle={Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2373--2387},
  year={2017}
}

@misc{rustlang,
title = {{Rust} {Programming Language}},
author = {Mozilla},
howpublished = {\url{https://www.rust-lang.org/}},
year = {2021}
}

@book{donovan2015go,
  title={The Go programming language},
  author={Donovan, Alan AA and Kernighan, Brian W},
  year={2015},
  publisher={Addison-Wesley Professional}
}

@article{nagarakatte2009softbound,
  title={SoftBound: Highly compatible and complete spatial memory safety for C},
  author={Nagarakatte, Santosh and Zhao, Jianzhou and Martin, Milo MK and Zdancewic, Steve},
  journal={ACM Sigplan Notices},
  volume={44},
  number={6},
  pages={245--258},
  year={2009},
  publisher={ACM}
}

@article{steffen1992adding,
  title={Adding run-time checking to the portable C compiler},
  author={Steffen, Joseph L},
  journal={Software: Practice and Experience},
  volume={22},
  number={4},
  pages={305--316},
  year={1992},
  publisher={Wiley Online Library}
}

@inproceedings{naik2021sporq,
  title={Sporq: An Interactive Environment for Exploring Code using Query-by-Example},
  author={Naik, Aaditya and Mendelson, Jonathan and Sands, Nathaniel and Wang, Yuepeng and Naik, Mayur and Raghothaman, Mukund},
  booktitle={The 34th Annual ACM Symposium on User Interface Software and Technology},
  pages={84--99},
  year={2021}
}

@inproceedings{ruef2019achieving,
  title={Achieving safety incrementally with checked c},
  author={Ruef, Andrew and Lampropoulos, Leonidas and Sweet, Ian and Tarditi, David and Hicks, Michael},
  booktitle={International Conference on Principles of Security and Trust},
  pages={76--98},
  year={2019},
  organization={Springer, Cham}
}

@inproceedings{siek2007gradual,
  title={Gradual typing for objects},
  author={Siek, Jeremy and Taha, Walid},
  booktitle={European Conference on Object-Oriented Programming},
  pages={2--27},
  year={2007},
  organization={Springer}
}

@inproceedings{milanova2002precise,
  title={Precise call graph construction in the presence of function pointers},
  author={Milanova, Ana and Rountev, Atanas and Ryder, Barbara G},
  booktitle={Proceedings. Second IEEE International Workshop on Source Code Analysis and Manipulation},
  pages={155--162},
  year={2002},
  organization={IEEE}
}

@misc{benchmarkcc,
  title = {Benchmarks for evaluating {Checked C}},
  author={Microsoft},
  year={2019},
  howpublished = {\url{https://github.com/microsoft/checkedc/wiki/Benchmarks-for-evaluating-Checked-C}},
  note = {Accessed: 2020-10-27}
}

@inproceedings{jangda2019not,
  title={Not So Fast: Analyzing the Performance of $\{$WebAssembly$\}$ vs. Native Code},
  author={Jangda, Abhinav and Powers, Bobby and Berger, Emery D and Guha, Arjun},
  booktitle={2019 USENIX Annual Technical Conference (USENIX ATC 19)},
  pages={107--120},
  year={2019}
}

@book{seward2008valgrind,
  title={Valgrind 3.3-advanced debugging and profiling for gnu/linux applications},
  author={Seward, Julian and Nethercote, Nicholas and Weidendorfer, Josef},
  year={2008},
  publisher={Network Theory Ltd.}
}

@InProceedings{tobinhochstadt_et_al:LIPIcs:2017:7120,
  author =      {Sam Tobin-Hochstadt and Matthias Felleisen and Robert Findler and Matthew Flatt and Ben Greenman and Andrew M. Kent and Vincent St-Amour and T. Stephen Strickland and Asumu Takikawa},
  title =       {{Migratory Typing: Ten Years Later}},
  booktitle =   {2nd Summit on Advances in Programming Languages (SNAPL 2017)},
  pages =       {17:1--17:17},
  year =        {2017},
  volume =      {71},
}

@article{Greenman:2018:STS:3243631.3236766,
 author = {Greenman, Ben and Felleisen, Matthias},
 title = {A Spectrum of Type Soundness and Performance},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {September 2018},
 volume = {2},
 number = {ICFP},
 year = {2018},
}

@inproceedings{kendall1983bcc,
  title={Bcc: Runtime checking for C programs},
  author={Kendall, Samuel C},
  booktitle={Proceedings of the USENIX Summer Conference},
  pages={5--16},
  year={1983}
}

@inproceedings{serebryany2012addresssanitizer,
  title={AddressSanitizer: A fast address sanity checker},
  author={Serebryany, Konstantin and Bruening, Derek and Potapenko, Alexander and Vyukov, Dmitriy},
  booktitle={{USENIX} Annual Technical Conference},
  pages={309--318},
  year={2012}
}

@article{10.1145/1065887.1065892,
author = {Necula, George C. and Condit, Jeremy and Harren, Matthew and McPeak, Scott and Weimer, Westley},
title = {CCured: Type-Safe Retrofitting of Legacy Software},
year = {2005},
issue_date = {May 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {27},
number = {3},
issn = {0164-0925},
url = {https://doi.org/10.1145/1065887.1065892},
doi = {10.1145/1065887.1065892},
abstract = {This article describes CCured, a program transformation system that adds type safety
guarantees to existing C programs. CCured attempts to verify statically that memory
errors cannot occur, and it inserts run-time checks where static verification is insufficient.CCured
extends C's type system by separating pointer types according to their usage, and
it uses a surprisingly simple type inference algorithm that is able to infer the appropriate
pointer kinds for existing C programs. CCured uses physical subtyping to recognize
and verify a large number of type casts at compile time. Additional type casts are
verified using run-time type information. CCured uses two instrumentation schemes,
one that is optimized for performance and one in which metadata is stored in a separate
data structure whose shape mirrors that of the original user data. This latter scheme
allows instrumented programs to invoke external functions directly on the program's
data without the use of a wrapper function.We have used CCured on real-world security-critical
network daemons to produce instrumented versions without memory-safety vulnerabilities,
and we have found several bugs in these programs. The instrumented code is efficient
enough to be used in day-to-day operations.},
journal = {ACM Trans. Program. Lang. Syst.},
month = may,
pages = {477–526},
numpages = {50},
keywords = {Memory safety, subtyping, libraries, pointer qualifier}
}

@inproceedings{tarditi2018checked,
author = {Tarditi, David and Elliott, Archibald Samuel and Ruef, Andrew and Hicks, Michael},
title = {{Checked} {C}: Making {C} Safe by Extension},
booktitle = {IEEE Cybersecurity Development Conference 2018 (SecDev)},
year = {2018},
month = sep
}

@article{necula2005ccured,
  title={CCured: type-safe retrofitting of legacy software},
  author={Necula, George C and Condit, Jeremy and Harren, Matthew and McPeak, Scott and Weimer, Westley},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={27},
  number={3},
  pages={477--526},
  year={2005},
  publisher={ACM}
}

@misc{chkcspec,
  title = {The {Checked} {C}},
  howpublished = {\url{https://github.com/microsoft/checkedc}},
  author={Checked C Spec},
  year={2016},
  note = {Accessed: 2020-10-10}
}

@article{giller2015implementing,
  title={Implementing practical electrical glitching attacks},
  author={Giller, Brett},
  journal={Black Hat Europe},
  year={2015}
}

@incollection{yuce2016fame,
  title={FAME: Fault-attack aware microprocessor extensions for hardware fault detection and software fault response},
  author={Yuce, Bilgiday and Ghalaty, Nahid F and Deshpande, Chinmay and Patrick, Conor and Nazhandali, Leyla and Schaumont, Patrick},
  booktitle={Proceedings of the Hardware and Architectural Support for Security and Privacy 2016},
  pages={1--8},
  year={2016}
}

@article{abadi2009control,
  title={Control-flow integrity principles, implementations, and applications},
  author={Abadi, Mart{\'\i}n and Budiu, Mihai and Erlingsson, Ulfar and Ligatti, Jay},
  journal={ACM Transactions on Information and System Security (TISSEC)},
  volume={13},
  number={1},
  pages={1--40},
  year={2009},
  publisher={ACM New York, NY, USA}
}

@incollection{kuznetzov2018code,
  title={Code-pointer integrity},
  author={Kuznetzov, Volodymyr and Szekeres, L{\'a}szl{\'o} and Payer, Mathias and Candea, George and Sekar, R and Song, Dawn},
  booktitle={The Continuing Arms Race: Code-Reuse Attacks and Defenses},
  pages={81--116},
  year={2018}
}

@inproceedings{spensky2021glitching,
  title={Glitching Demystified: Analyzing Control-flow-based Glitching Attacks and Defenses},
  author={Spensky, Chad and Machiry, Aravind and Burow, Nathan and Okhravi, Hamed and Housley, Rick and Gu, Zhongshu and Jamjoom, Hani and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={2021 51st Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)},
  pages={400--412},
  year={2021},
  organization={IEEE}
}

@article{quarta2021tarnhelm,
  title={Tarnhelm: Isolated, Transparent \& Confidential Execution of Arbitrary Code in ARM’s TrustZone},
  author={Quarta, Davide and Ianni, Michele and Machiry, Aravind and Fratantonio, Yanick and Gustafson, Eric and Balzarotti, Davide and Lindorfer, Martina and Vigna, Giovanni and Kruegel, Christopher},
  year={2021}
}

@ARTICLE{pratikakis11locksmith,
  TITLE = {Locksmith: Practical Static Race Detection for {C}},
  AUTHOR = {Polyvios Pratikakis and Jeffrey S. Foster and Michael Hicks},
  JOURNAL = {{ACM} Transactions on Programming Languages and Systems (TOPLAS)},
  MONTH = JAN,
  YEAR = 2011,
  VOLUME = {33},
  NUMBER = 1,
  PAGES = {Article 3}
}

@article{foster2006flow,
  title={Flow-insensitive type qualifiers},
  author={Foster, Jeffrey S and Johnson, Robert and Kodumal, John and Aiken, Alex},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={28},
  number={6},
  pages={1035--1087},
  year={2006},
  publisher={ACM New York, NY, USA}
}

@inproceedings{condit2007dependent,
  title={Dependent types for low-level programming},
  author={Condit, Jeremy and Harren, Matthew and Anderson, Zachary and Gay, David and Necula, George C},
  booktitle={European Symposium on Programming},
  pages={520--535},
  year={2007},
  organization={Springer}
}

@INPROCEEDINGS{elliott18checkedc,
  TITLE = {{Checked {C}: Making {C} Safe by Extension}},
  AUTHOR = {Archibald Samuel Elliott and Andrew Ruef and Michael Hicks and David Tarditi},
  BOOKTITLE = {Proceedings of the IEEE Conference on Secure Development (SecDev)},
  MONTH = SEP,
  YEAR = 2018
}

@INPROCEEDINGS{gil18hole,
  TITLE = {There’s a Hole in the Bottom of the {C}: On the Effectiveness of Allocation Protection},
  AUTHOR = {Ronald Gil and Hamed Okhravi and Howard Shrobe},
  BOOKTITLE = {Proceedings of the IEEE Conference on Secure Development (SecDev)},
  MONTH = SEP,
  YEAR = 2018
}

@inproceedings{siek06,
  author = {Jeremy G. Siek and Walid Taha},
  title = {Gradual Typing for Functional Languages},
  booktitle = {Workshop on Scheme and Functional Programming},
  year = 2006
}

@inproceedings{matthews07,
 author = {Matthews, Jacob and Findler, Robert Bruce},
 title = {Operational Semantics for Multi-language Programs},
 booktitle = {POPL},
 year = {2007},
}

@inproceedings{wadler09,
 author = {Wadler, Philip and Findler, Robert Bruce},
 title = {Well-Typed Programs Can'T Be Blamed},
 booktitle = {ESOP},
 year = {2009},
} 

@article{Austin1994Ptrdist,
 author = {Austin, Todd M. and Breach, Scott E. and Sohi, Gurindar S.},
 title = {Efficient Detection of All Pointer and Array Access Errors},
 journal = {SIGPLAN Not.},
 issue_date = {June 1994},
 volume = {29},
 number = {6},
 month = jun,
 year = {1994},
}

@article{necula2005ccured,
  title={{CCured: type-safe retrofitting of legacy software}},
  author={Necula, George C and Condit, Jeremy and Harren, Matthew and McPeak, Scott and Weimer, Westley},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={27},
  number={3},
  pages={477--526},
  year={2005},
}

@article{Rogers1995Olden,
 author = {Rogers, Anne and Carlisle, Martin C. and Reppy, John H. and Hendren, Laurie J.},
 title = {Supporting Dynamic Data Structures on Distributed-memory Machines},
 journal = {ACM Trans. Program. Lang. Syst.},
 issue_date = {March 1995},
 volume = {17},
 number = {2},
 month = mar,
 year = {1995},
 pages = {233--263},
 numpages = {31},
}

@book{sangiorgi2011advanced,
  title={Advanced topics in bisimulation and coinduction},
  author={Sangiorgi, Davide and Rutten, Jan},
  volume={52},
  year={2011},
  publisher={Cambridge University Press}
}

@InProceedings{ruef18checkedc-incr,
author="Ruef, Andrew
and Lampropoulos, Leonidas
and Sweet, Ian
and Tarditi, David
and Hicks, Michael",
editor="Nielson, Flemming
and Sands, David",
title={{Achieving Safety Incrementally with Checked C}},
booktitle="Principles of Security and Trust",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="76--98",
abstract="Checked C is a new effort working toward a memory-safe C. Its design is distinguished from that of prior efforts by truly being an extension of C: Every C program is also a Checked C program. Thus, one may make incremental safety improvements to existing codebases while retaining backward compatibility. This paper makes two contributions. First, to help developers convert existing C code to use so-called checked (i.e., safe) pointers, we have developed a preliminary, automated porting tool. Notably, this tool takes advantage of the flexibility of Checked C's design: The tool need not perfectly classify every pointer, as required of prior all-or-nothing efforts. Rather, it can make a best effort to convert more pointers accurately, without letting inaccuracies inhibit compilation. However, such partial conversion raises the question: If safety violations can still occur, what sort of advantage does using Checked C provide? We draw inspiration from research on migratory typing to make our second contribution: We prove a blame property that renders so-called checked regions blameless of any run-time failure. We formalize this property for a core calculus and mechanize the proof in Coq.",
isbn="978-3-030-17138-4"
}

@article{10.1145/2980983.2908081,
author = {Memarian, Kayvan and Matthiesen, Justus and Lingard, James and Nienhuis, Kyndylan and Chisnall, David and Watson, Robert N. M. and Sewell, Peter},
title = {{Into the Depths of C: Elaborating the de Facto Standards}},
year = {2016},
issue_date = {June 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {51},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/2980983.2908081},
doi = {10.1145/2980983.2908081},
abstract = { C remains central to our computing infrastructure. It is notionally defined by ISO
standards, but in reality the properties of C assumed by systems code and those implemented
by compilers have diverged, both from the ISO standards and from each other, and none
of these are clearly understood. We make two contributions to help improve this error-prone
situation. First, we describe an in-depth analysis of the design space for the semantics
of pointers and memory in C as it is used in practice. We articulate many specific
questions, build a suite of semantic test cases, gather experimental data from multiple
implementations, and survey what C experts believe about the de facto standards. We
identify questions where there is a consensus (either following ISO or differing)
and where there are conflicts. We apply all this to an experimental C implemented
above capability hardware. Second, we describe a formal model, Cerberus, for large
parts of C. Cerberus is parameterised on its memory model; it is linkable either with
a candidate de facto memory object model, under construction, or with an operational
C11 concurrency model; it is defined by elaboration to a much simpler Core language
for accessibility, and it is executable as a test oracle on small examples. This should
provide a solid basis for discussion of what mainstream C is now: what programmers
and analysis tools can assume and what compilers aim to implement. Ultimately we hope
it will be a step towards clear, consistent, and accepted semantics for the various
use-cases of C. },
journal = {SIGPLAN Not.},
month = jun,
pages = {1–15},
numpages = {15},
keywords = {C}
}

@inproceedings{DBLP:conf/ictac/LiG21,
  author    = {Liyi Li and
               Elsa L. Gunter},
  editor    = {Antonio Cerone and
               Peter Csaba {\"{O}}lveczky},
  title     = {A Complete Semantics of {\textdollar}{\textbackslash}mathbb \{K\}{\textdollar}
               and Its Translation to Isabelle},
  booktitle = {Theoretical Aspects of Computing - {ICTAC} 2021 - 18th International
               Colloquium, Virtual Event, Nur-Sultan, Kazakhstan, September 8-10,
               2021, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {12819},
  pages     = {152--171},
  publisher = {Springer},
  year      = {2021},
  url       = {https://doi.org/10.1007/978-3-030-85315-0\_10},
  doi       = {10.1007/978-3-030-85315-0\_10},
  timestamp = {Wed, 25 Aug 2021 09:47:08 +0200},
  biburl    = {https://dblp.org/rec/conf/ictac/LiG21.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Zhao:2012:FLI:2103621.2103709,
 author = {Zhao, Jianzhou and Nagarakatte, Santosh and Martin, Milo M.K. and Zdancewic, Steve},
 title = {{Formalizing the LLVM Intermediate Representation for Verified Program Transformations}},
 journal = {SIGPLAN Not.},
 issue_date = {January 2012},
 volume = {47},
 number = {1},
 month = jan,
 year = {2012},
 issn = {0362-1340},
 pages = {427--440},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/2103621.2103709},
 doi = {10.1145/2103621.2103709},
 acmid = {2103709},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Coq, LLVM, memory safety},
} 

@article{Lee:2017:TUB:3140587.3062343,
 author = {Lee, Juneyoung and Kim, Yoonseung and Song, Youngju and Hur, Chung-Kil and Das, Sanjoy and Majnemer, David and Regehr, John and Lopes, Nuno P.},
 title = {{Taming Undefined Behavior in LLVM}},
 journal = {SIGPLAN Not.},
 issue_date = {June 2017},
 volume = {52},
 number = {6},
 month = jun,
 year = {2017},
 issn = {0362-1340},
 pages = {633--647},
 numpages = {15},
 url = {http://doi.acm.org/10.1145/3140587.3062343},
 doi = {10.1145/3140587.3062343},
 acmid = {3062343},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {compilers, intermediate representations, undefined behavior},
} 

@article{10.1145/1543135.1542504,
author = {Nagarakatte, Santosh and Zhao, Jianzhou and Martin, Milo M.K. and Zdancewic, Steve},
title = {{SoftBound: Highly Compatible and Complete Spatial Memory Safety for c}},
year = {2009},
issue_date = {June 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {44},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/1543135.1542504},
doi = {10.1145/1543135.1542504},
abstract = {The serious bugs and security vulnerabilities facilitated by C/C++'s lack of bounds
checking are well known, yet C and C++ remain in widespread use. Unfortunately, C's
arbitrary pointer arithmetic, conflation of pointers and arrays, and programmer-visible
memory layout make retrofitting C/C++ with spatial safety guarantees extremely challenging.
Existing approaches suffer from incompleteness, have high runtime overhead, or require
non-trivial changes to the C source code. Thus far, these deficiencies have prevented
widespread adoption of such techniques.This paper proposes SoftBound, a compile-time
transformation for enforcing spatial safety of C. Inspired by HardBound, a previously
proposed hardware-assisted approach, SoftBound similarly records base and bound information
for every pointer as disjoint metadata. This decoupling enables SoftBound to provide
spatial safety without requiring changes to C source code. Unlike HardBound, SoftBound
is a software-only approach and performs metadata manipulation only when loading or
storing pointer values. A formal proof shows that this is sufficient to provide spatial
safety even in the presence of arbitrary casts. SoftBound's full checking mode provides
complete spatial violation detection with 67% runtime overhead on average. To further
reduce overheads, SoftBound has a store-only checking mode that successfully detects
all the security vulnerabilities in a test suite at the cost of only 22% runtime overhead
on average.},
journal = {SIGPLAN Not.},
month = jun,
pages = {245–258},
numpages = {14},
keywords = {spatial memory safety, buffer overflows, c}
}

@article{10.1145/1837855.1806657,
author = {Nagarakatte, Santosh and Zhao, Jianzhou and Martin, Milo M.K. and Zdancewic, Steve},
title = {CETS: Compiler Enforced Temporal Safety for C},
year = {2010},
issue_date = {August 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {45},
number = {8},
issn = {0362-1340},
url = {https://doi.org/10.1145/1837855.1806657},
doi = {10.1145/1837855.1806657},
abstract = {Temporal memory safety errors, such as dangling pointer dereferences and double frees,
are a prevalent source of software bugs in unmanaged languages such as C. Existing
schemes that attempt to retrofit temporal safety for such languages have high runtime
overheads and/or are incomplete, thereby limiting their effectiveness as debugging
aids. This paper presents CETS, a compile-time transformation for detecting all violations
of temporal safety in C programs. Inspired by existing approaches, CETS maintains
a unique identifier with each object, associates this metadata with the pointers in
a disjoint metadata space to retain memory layout compatibility, and checks that the
object is still allocated on pointer dereferences. A formal proof shows that this
is sufficient to provide temporal safety even in the presence of arbitrary casts if
the program contains no spatial safety violations. Our CETS prototype employs both
temporal check removal optimizations and traditional compiler optimizations to achieve
a runtime overhead of just 48% on average. When combined with a spatial-checking system,
the average overall overhead is 116% for complete memory safety},
journal = {SIGPLAN Not.},
month = jun,
pages = {31–40},
numpages = {10},
keywords = {dangling pointers, memory safety, c, temporal errors}
}

@article{10.1145/2813885.2737979,
author = {Hathhorn, Chris and Ellison, Chucky and Ro\c{s}u, Grigore},
title = {{Defining the Undefinedness of C}},
year = {2015},
issue_date = {June 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/2813885.2737979},
doi = {10.1145/2813885.2737979},
abstract = { We present a ``negative'' semantics of the C11 language---a semantics that does not
just give meaning to correct programs, but also rejects undefined programs. We investigate
undefined behavior in C and discuss the techniques and special considerations needed
for formally specifying it. We have used these techniques to modify and extend a semantics
of C into one that captures undefined behavior. The amount of semantic infrastructure
and effort required to achieve this was unexpectedly high, in the end nearly doubling
the size of the original semantics. From our semantics, we have automatically extracted
an undefinedness checker, which we evaluate against other popular analysis tools,
using our own test suite in addition to a third-party test suite. Our checker is capable
of detecting examples of all 77 categories of core language undefinedness appearing
in the C11 standard, more than any other tool we considered. Based on this evaluation,
we argue that our work is the most comprehensive and complete semantic treatment of
undefined behavior in C, and thus of the C language itself. },
journal = {SIGPLAN Not.},
month = jun,
pages = {336–345},
numpages = {10},
keywords = {C11, K Framework, Programming language semantics, Undefined behavior}
}

@inproceedings{ellison-rosu-2012-popl,
 author = {Ellison, Chucky and Rosu, Grigore},
 title = {{An Executable Formal Semantics of C with Applications}},
 booktitle = {Proceedings of the 39th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '12},
 year = {2012},
 isbn = {978-1-4503-1083-3},
 location = {Philadelphia, PA, USA},
 pages = {533--544},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2103656.2103719},
 doi = {10.1145/2103656.2103719},
 acmid = {2103719},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {C, k, semantics},
}


@article{Memarian:2019:ECS:3302515.3290380,
 author = {Memarian, Kayvan and Gomes, Victor B. F. and Davis, Brooks and Kell, Stephen and Richardson, Alexander and Watson, Robert N. M. and Sewell, Peter},
 title = {{Exploring C Semantics and Pointer Provenance}},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {January 2019},
 volume = {3},
 number = {POPL},
 month = jan,
 year = {2019},
 issn = {2475-1421},
 pages = {67:1--67:32},
 articleno = {67},
 numpages = {32},
 url = {http://doi.acm.org/10.1145/3290380},
 doi = {10.1145/3290380},
 acmid = {3290380},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {C},
} 

@article{Lee:2018:RHO:3288538.3276495,
 author = {Lee, Juneyoung and Hur, Chung-Kil and Jung, Ralf and Liu, Zhengyang and Regehr, John and Lopes, Nuno P.},
 title = {{Reconciling High-level Optimizations and Low-level Code in LLVM}},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {November 2018},
 volume = {2},
 number = {OOPSLA},
 month = oct,
 year = {2018},
 issn = {2475-1421},
 pages = {125:1--125:28},
 articleno = {125},
 numpages = {28},
 url = {http://doi.acm.org/10.1145/3276495},
 doi = {10.1145/3276495},
 acmid = {3276495},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {IR Memory Model, LLVM},
} 

@article{Kang:2015:FCM:2813885.2738005,
 author = {Kang, Jeehoon and Hur, Chung-Kil and Mansky, William and Garbuzov, Dmitri and Zdancewic, Steve and Vafeiadis, Viktor},
 title = {{A Formal C Memory Model Supporting Integer-pointer Casts}},
 journal = {SIGPLAN Not.},
 issue_date = {June 2015},
 volume = {50},
 number = {6},
 month = jun,
 year = {2015},
 issn = {0362-1340},
 pages = {326--335},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2813885.2738005},
 doi = {10.1145/2813885.2738005},
 acmid = {2738005},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {C Memory Model, Compiler, Integer-Pointer Cast, Optimization, Verification},
} 


@techreport{leroy:hal-00703441,
  TITLE = {{The CompCert Memory Model, Version 2}},
  AUTHOR = {Leroy, Xavier and Appel, Andrew W. and Blazy, Sandrine and Stewart, Gordon},
  URL = {https://hal.inria.fr/hal-00703441},
  TYPE = {Research Report},
  NUMBER = {RR-7987},
  PAGES = {26},
  INSTITUTION = {{INRIA}},
  YEAR = {2012},
  MONTH = Jun,
  KEYWORDS = {Memory models ; formal semantics ; verified compilation ; CompCert},
  PDF = {https://hal.inria.fr/hal-00703441/file/RR-7987.pdf},
  HAL_ID = {hal-00703441},
  HAL_VERSION = {v1},
}

@inproceedings{PalkaAST11,
 author = {Pa{\l}ka, Micha{\l} H. and Claessen, Koen and Russo, Alejandro and Hughes, John},
 title = {{Testing an Optimising Compiler by Generating Random Lambda Terms}},
 booktitle = {Proceedings of the 6th International Workshop on Automation of Software Test},
 shortbooktitle = {AST},
 series = {AST '11},
 year = {2011},
 isbn = {978-1-4503-0592-1},
 location = {Waikiki, Honolulu, HI, USA},
 pages = {91--97},
 numpages = {7},
 url = {http://doi.acm.org/10.1145/1982595.1982615},
 doi = {10.1145/1982595.1982615},
 acmid = {1982615},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {random testing, software testing},
 } 

@inproceedings{lambdajs,
author = {Guha, Arjun and Saftoiu, Claudiu and Krishnamurthi, Shriram},
title = {{The Essence of Javascript}},
year = {2010},
isbn = {3642141064},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
booktitle = {Proceedings of the 24th European Conference on Object-Oriented Programming},
pages = {126–150},
numpages = {25},
location = {Maribor, Slovenia},
series = {ECOOP'10}
}

@article{merigoux2021catala,
  title={{Catala: A Programming Language for the Law}},
  author={Merigoux, Denis and Chataing, Nicolas and Protzenko, Jonathan},
  journal={arXiv preprint arXiv:2103.03198},
  year={2021}
}
