480,486c480,486
< Fig.~\ref{fig:strncat-ex} are examples. The widened bounds
< precipitated by $\estrlen{y}$ is $x$'s scope, meaning that within $e$
< the upper bound of $y$'s pointed-to array is $x$. Outside this scope,
< the old bound is restored. For example, \code{x}'s scope in line 4 is
< the whole function body in \code{strncat} because our compiler parses
< the local variable assignment to be a let-binding as
< \elet{\code{x}}{\estrlen{\code{a}}}{...}. % Allowing widening to persist
---
> Fig.~\ref{fig:strncat-ex} are examples. 
> The widened bounds
> precipitated by $\estrlen{y}$ is extended beyond the lifetime of $x$, as long as $y$ is alive.
> Even if $x$ returns, if the $y$'s upper bound keeps the widened bound that is caused by $\estrlen{y}$.
> For example, \code{x}'s scope in line 4 is
> the whole function body in \code{strncat} because the lifetime of the pointer $y$ is in the function body.
> % Allowing widening to persist
490a491,492
> This is different from the \checkedc specification, 
> which only allows bound widening to happen within the scope of $x$, and restoring old bound values once $x$ dies.
546,547c548,549
< the two-point lattice with $\umode < \cmode$. \mwh{All remaining rules
<   are given in Appendix XXX}
---
> the two-point lattice with $\umode < \cmode$. All remaining rules
>   are given in Appx.~\ref{sec:literal-pointer-typing}~and~\ref{rem-type}.
